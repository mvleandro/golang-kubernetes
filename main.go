package main

import (
	"context"
	"flag"
	"fmt"
	"path/filepath"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	_ "k8s.io/client-go/plugin/pkg/client/auth/oidc"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/client-go/util/homedir"
)

func main() {
	var kubeconfig *string
	if home := homedir.HomeDir(); home != "" {
		kubeconfig = flag.String("kubeconfig", filepath.Join(home, ".kube", "config"), "(optional) absolute path to the kubeconfig file")
	} else {
		kubeconfig = flag.String("kubeconfig", "", "absolute path to the kubeconfig file")
	}
	flag.Parse()

	// use the current context in kubeconfig
	config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
	if err != nil {
		panic(err.Error())
	}

	// create the clientset
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err.Error())
	}

	timeOut := int64(120)
	watcher, _ := clientset.CoreV1().ConfigMaps("logging").Watch(context.Background(), metav1.ListOptions{TimeoutSeconds: &timeOut})



























































































































































































































































































































































































































































































































































































































































































































































































































































































































	for event := range watcher.ResultChan() {
		item := event.Object.(*corev1.ConfigMap)

		fmt.Printf("New configmap named %s %s on namespace %s\n", item.Name, event.Type, item.Namespace)

		fmt.Println("Listing annotations:")
		for annotation := range item.Annotations {
			fmt.Println(annotation)
		}
		fmt.Println()
		fmt.Println()

	}
}
